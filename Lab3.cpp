/********************************************************************************
 * Л А Б О Р А Т О Р Н А Я   Р А Б О Т А  №3  З А   5   С Е М Е С Т Р   С  +  + *
 *------------------------------------------------------------------------------*
 * Project Type  : Win64 Console Application                                    *
 * Project Name  : Teor_Grph_Lab3                                               *
 * File Name     : Lab3. CPP                                                    *
 * Programmer(s) : Викулов Д.Г.                                                 *
 * Modifyed By   :                                                              *
 * Created       : 15/09/23                                                     *
 * Last Revision : 13/10/23                                                     *
 * Comment(s)    : Программа, находящая мосты и шарниры в графе. Для орграфа    *
 *                 находятся мосты и шарниры в соотнесённом графе.              *
 ********************************************************************************/


#include <iostream>              // стандартные потоки ввода/вывода
#include <vector>                // работа с векторами для удобства быстрого извлечения и удаления элементов
#include <fstream>               // работа с потоками ввода/вывода для файла
#include <iomanip>               // библиотека с модификатором setw
#include <graphviz/gvc.h>        // библиотека Graphviz для графического изображения графа по матрице смежности
#include <opencv2/opencv.hpp>    // заголовок, подтягивающий все функции OpenCv

using namespace std;             // используем пространство имён std



/*******************************************************************/
/*            Г Л О Б А Л Ь Н Ы Е    К О Н С Т А Н Т Ы             */
/*******************************************************************/

// путь к файлу через константный указатель
// Входные файлы
// ТЕСТЫ ДЛЯ МАТРИЦЫ СМЕЖНОСТИ
//const char* FNAMEIN = "matrix_t3_001.txt";                // файл с матрицей смежности
//const char* FNAMEIN = "matrix_t3_002.txt";                // файл с матрицей смежности
//const char* FNAMEIN = "matrix_t3_003.txt";                // файл с матрицей смежности
//const char* FNAMEIN = "matrix_t3_004.txt";                // файл с матрицей смежности
//const char* FNAMEIN = "matrix_t3_005.txt";                // файл с матрицей смежности
//const char* FNAMEIN = "matrix_t3_006.txt";                // файл с матрицей смежности
//const char* FNAMEIN = "matrix_t3_007.txt";                // файл с матрицей смежности
//const char* FNAMEIN = "matrix_t3_008.txt";                // файл с матрицей смежности
//const char* FNAMEIN = "matrix_t3_009.txt";                // файл с матрицей смежности
const char* FNAMEIN = "matrix_t3_010.txt";                // файл с матрицей смежности

// ТЕСТЫ ДЛЯ СПИСКА РЕБЕР
//const char* FNAMEIN = "list_of_edges_t3_001.txt";         // файл со списком рёбер
//const char* FNAMEIN = "list_of_edges_t3_002.txt";         // файл со списком рёбер
//const char* FNAMEIN = "list_of_edges_t3_003.txt";         // файл со списком рёбер
//const char* FNAMEIN = "list_of_edges_t3_004.txt";         // файл со списком рёбер
//const char* FNAMEIN = "list_of_edges_t3_005.txt";         // файл со списком рёбер
//const char* FNAMEIN = "list_of_edges_t3_006.txt";         // файл со списком рёбер
//const char* FNAMEIN = "list_of_edges_t3_007.txt";         // файл со списком рёбер
//const char* FNAMEIN = "list_of_edges_t3_008.txt";         // файл со списком рёбер
//const char* FNAMEIN = "list_of_edges_t3_009.txt";         // файл со списком рёбер
//const char* FNAMEIN = "list_of_edges_t3_010.txt";         // файл со списком рёбер

// ТЕСТЫ ДЛЯ СПИСКА СМЕЖНОСТИ
//const char* FNAMEIN = "list_of_adjacency_t3_001.txt";     // файл со списком смежности
//const char* FNAMEIN = "list_of_adjacency_t3_002.txt";     // файл со списком смежности
//const char* FNAMEIN = "list_of_adjacency_t3_003.txt";     // файл со списком смежности
//const char* FNAMEIN = "list_of_adjacency_t3_004.txt";     // файл со списком смежности
//const char* FNAMEIN = "list_of_adjacency_t3_005.txt";     // файл со списком смежности
//const char* FNAMEIN = "list_of_adjacency_t3_006.txt";     // файл со списком смежности
//const char* FNAMEIN = "list_of_adjacency_t3_007.txt";     // файл со списком смежности
//const char* FNAMEIN = "list_of_adjacency_t3_008.txt";     // файл со списком смежности
//const char* FNAMEIN = "list_of_adjacency_t3_009.txt";     // файл со списком смежности
//const char* FNAMEIN = "list_of_adjacency_t3_010.txt";     // файл со списком смежности

// ВЫХОДНЫЕ ФАЙЛЫ
const char* FNAMEOUT = "Output_File.txt";

// бесконечность для матрицы расстояний
const int INF = 10000;




/*******************************************************************/
/*      Г Л О Б А Л Ь Н Ы Е    Ф А Й Л О В Ы Е    П О Т О К И      */
/*******************************************************************/

 // объявление объекта для потокового ввода данных из файла
ifstream fin;
// объявление объекта для потокового вывода данных в файл
ofstream fout;



/*******************************************************************/
/*                 И Е Р А Р Х И Я   К Л А С С О В                 */
/*******************************************************************/

/*------------------------------------------------------------------------*/
/*                 Graph                  */
/*----------------------------------------*/

class Graph
{
private:
	vector<vector<int>> m_matrix;                             // граф в программе представлен матрицей смежности
	int m_size;                                               // размер матрицы смежности (количество вершин в графе)

public:
	// конструктор
	Graph();
	// деструктор
	~Graph();
	// константный геттер для получения значения размера
	const int GetSize();
	// функция возвращающая True, если граф ориентированный, False, если граф простой;
	bool is_directed();
	// функция, возвращающая матрицу смежности
	vector<vector<int>> adjacency_matrix();
	// весовая функция, принимает номера вершин, возвращает вес ребра, связывающего их;
	int Weight(int Vi, int Vj);
	// функция, принимающая номера вершин и возвращает True, если в графе есть соответствующее ребро / дуга, False, если ребра нет;
	bool is_edge(int Vi, int Vj);
	// функция, возвращающая список вершин, смежных вершине v;
	vector<int> adjacency_list(int v);
	// функция, возвращающая список всех рёбер графа;
	vector<pair<int, int>> list_of_edges_pairs();
	// – функция, возвращающая список всех рёбер графа, инцидентных вершине v / исходящих из вершины v
	vector<pair<int, int>> list_of_edges(int v);
};




/*******************************************************************/
/*              П Р О Т О Т И П Ы    Ф У Н К Ц И Й                 */
/*******************************************************************/

// печать справки и авторов работы
void Usloviya();

// сохранение графа как фотографии
string drawGraph(const vector<vector<int>>& adjacencyMatrix);     // объявление константной ссылки на двумерный вектор adjacencyMatrix, содержащий целочисленные значения 

// вывод графа на экран в виде картинки
void OpenImage(const vector<vector<int>>& adjacencyMatrix);       // объявление константной ссылки на двумерный вектор adjacencyMatrix, содержащий целочисленные значения 

// вывод матрицы смежности на экран
void PrintMatrix(vector<vector<int>> matrix);                     // матрица, которую необходимо вывести на экран. Передача по значению

// обход вглубину
void DFS(vector<vector<int>> matrix,                              // матрица смежности, с которой будем работать
	     int StartVertex,                                         // стартовая вершина обхода
	     vector<bool>&Visited,                                    // вектор посещённых вершин для обхода
	     vector<int>&obx);                                        // вектор, содержащий все вершины в порядке работы алгоритма

// превращение графа в соотнесённый
void convertToUndirected(vector<vector<int>>& matrix);            // матрица смежности для изменения

// поиск мостов и точек сочленения
void Most(vector<vector<int>> m_matrix,                           // матрица смежности, с которой будем работать
	      int Start_Vertex,                                       // начальная вершина обхода для очередной компоненты связности
	      vector <bool>& visited,                                 // массив посещённых вершин
	      set <int> &Articulation_point,                          // массив точек сочленения
          vector <pair<int, int>>& bridge);                       // массив мостов

// вывод матрицы  в файл
void PrintMatrToFile(vector<vector<int>> matrix);                 // матрица, которую необходимо вывести в файл. Передача по значению



// конструктор - считывание матрицы из файла
Graph::Graph()
{
	fin.open(FNAMEIN);            // связываем объект с файлом
	if (!fin.is_open())           // файл не найден
	{
		cout << "Файла с таким именем нет. Невозможно осуществить чтение";
		fin.close();              // закрыть файл для чтения
		system("pause");
		exit(0);                  // возвращаем значение, соответствующее типу в caller
	}// if (!fin.is_open())

	int value;                    // очередной считываемый символ
	char key;                     // ключ для указания пользователем варианта задания графа в файле
	bool spravka = true;          // ключ для вывода справки на экран
	vector<int> row;              // вектор для считывания промежуточных значений из файла построчно
	vector<vector<int>> matrix;   // вспомогательная матрица смежности

	// повтор ввода задания графа, когда пользователь захотел вывести на экран справку
	while (spravka)
	{
		cout << "\x1b[30m В В Е Д И Т Е   К Л Ю Ч   И Л И   <h>   Д Л Я   В Ы З О В А   П О Д С К А З К И : \x1b[30m";
		// пользователь ввёл ключ для того, чтобы явно указать, каким способом он задал граф
		cin >> key;
		cout << "\n Вы ввели: " << key << endl;

		// в зависимости от значения ключа
		switch (key)
		{
			// работа с матрицей смежности
		case('m'):
		case('M'):
		{
			cout << "\n\t\t\t\t\x1b[32m В Ы   В Ы Б Р А Л И   Т И П   З А Д А Н И Я   -   М А Т Р И Ц А   С М Е Ж Н О С Т И\n\n\x1b[30m\n";
			// считываем очередное число из файла
			while (fin >> value)
			{
				// после считывания каждой строки очищаем вектор строки
				row.clear();
				// загоняем в вектор первый считанный элемент от первого while (fin >> value)
				row.push_back(value);
				// считываем все остальные элементы строки, пока не нашли символ её окончания - \n
				while (fin.peek() != '\n' && fin >> value)
				{
					row.push_back(value);
				}// while (fin.peek() != '\n' && fin >> value)

				// кладем в матрицу считанную строку. Все строки имеют одинаковый размер, так как работаем с матрицей смежности
				m_matrix.push_back(row);

			}// while (fin >> value)

			// повторять ввод не надо. Матрица заполнена
			spravka = false;
			break;
		}

		// работа со списком рёбер
		case('e'):
		case('E'):
		{
			cout << "\n\t\t\t\t\x1b[32m В Ы   В Ы Б Р А Л И   Т И П   З А Д А Н И Я   -   С П И С О К   Р Ё Б Е Р\n\n\x1b[30m\n";

			// считываем значения из файла в вектор
			// в векторе будут находиться с чередованием через три элементы: начальная вершина, конечная вершина и вес ребра
			while (fin >> value)
			{
				// после считывания каждой строки очищаем вектор строки
				row.clear();
				// загоняем в вектор первый считанный элемент от первого while (fin >> value)
				row.push_back(value);
				// считываем все остальные элементы строки, пока не нашли символ её окончания - \n
				while (fin.peek() != '\n' && fin >> value)
				{
					row.push_back(value);
				}// while (fin.peek() != '\n' && fin >> value)

				// кладем в матрицу считанную строку. Все строки имеют одинаковый размер, так как работаем с матрицей смежности
				m_matrix.push_back(row);
			}// while (fin >> value)

			// закрыть файл чтения
			fin.close();
			int size_m = m_matrix[m_matrix.size() - 1][0];    // размер матрицы смежности
			vector<vector<int>> vec_1(size_m);                // матрица смежности

			for (int i = 0; i < size_m; i++)                  // задаём размер каждой ячейки vec_1
			{
				vec_1[i].resize(size_m, 0);
			}// for i

			// заполняем матрицу смежности
			for (int i = 0; i < m_matrix.size(); i++)
			{
				if (m_matrix[0].size() == 3)                  // 3 элемент - это вес ребра, если он не указан, то значит он = 1
				{
					vec_1[m_matrix[i][0] - 1][m_matrix[i][1] - 1] = m_matrix[i][2];
				}
				else
				{
					vec_1[m_matrix[i][0] - 1][m_matrix[i][1] - 1] = 1;
				}// if (m_matrix[0].size() == 3)
			}// for i

			// запоминаем матрицу смежности
			m_matrix = vec_1;
			// повторять ввод не надо. Матрица заполнена
			spravka = false;
			break;
		}

		// работаем со списками смежности
		case('l'):
		case('L'):
		{
			cout << "\n\t\t\t\t\x1b[32m В Ы   В Ы Б Р А Л И   Т И П   З А Д А Н И Я   -   С П И С О К   С М Е Ж Н О С Т И\n\n\x1b[30m\n";

			// чтение из файла построчно
			string line;
			int rowNumber = 0;            // номер текущей строки

			// чтение построчное
			while (getline(fin, line))
			{
				// Если строка пустая, заполняем текущую строку нулями
				if (line.empty())
				{
					matrix.push_back(vector<int>(m_size, 0));
				}
				// строка не пустая
				else
				{
					// вектор строки
					vector<int> row;
					// создает поток для чтения значений из строки line. Затем мы можем использовать iss вместе с оператором >> для извлечения значений из строки.
					istringstream iss(line);
					// очередная величина для чтения
					int value;

					// читаем значение из файла и помещаем его в вектор строки
					while (iss >> value)
					{
						row.push_back(value);
					}// while

					// помещаем строку в матрицу
					matrix.push_back(row);
				}// if (line.empty()) 

				// увеличиваем номер строки
				rowNumber++;
			}// while (getline(fin, line)) 

			// файл прочитан - закрываем его
			fin.close();

			m_size = matrix.size();                         // размер матрицы смежности

			vector<vector<int>> vec_1(m_size);              // доп матрица смежности размером m_size

			for (int i = 0; i < m_size; i++)                // задаём размер каждой ячейки доп матрицы смежности
			{
				// заполняем вспомогательную матрицу нулями по всему размеру
				vec_1[i].resize(m_size, 0);
			}// for i

			for (int i = 0; i < m_size; i++)                 // заполняем доп матрицу смежности 
			{
				for (int j = 0; j < matrix[i].size(); j++)
				{
					// единица в тех столбцах, которые перечислены для данной в файле
					vec_1[i][matrix[i][j] - 1] = 1;
				}// for j
			}// for i

			// загоняем значения в основную матрицу смежности
			for (int i = 0; i < m_size; i++)
			{
				row.clear();
				for (int j = 0; j < m_size; ++j)
				{
					row.push_back(vec_1[i][j]);
				}// fot j

				m_matrix.push_back(row);
			}// for i

			// повторять ввод не надо. Матрица заполнена
			spravka = false;
			break;
		}

		// пользователь выбрал справку
		case('h'):
		case('H'):
		{
			// повторить ввод после появления мправки на экране
			spravka = true;
			// выводим условия
			Usloviya();
			break;
		}

		// иначе - пользователь ввёл не тот ключ. Заканчиваем программу с ошибкой
		default:
			cout << "\n\x1b[31m ПЕРЕЗАПУСТИТЕ ПРОГРАММУ И ВВЕДИТЕ ЗНАЧЕНИЕ ИЗ СПИСКА КЛЮЧЕЙ!!!\n\x1b[30m";
			// закрываем файл считывания
			fin.close();
			exit(0);
		}
	}
	// закрываем файл считывания
	fin.close();
	// запоминаем размер считанной/ преобразованной матрицы смежности
	m_size = m_matrix.size();
}

// деструктор
Graph::~Graph()
{
	// пустое тело - векторы уничтожаются автоматически
}

// геттер для получения значения размера
const int Graph::GetSize()
{
	return(m_size);
}


// функция возвращающая True, если граф ориентированный, False, если граф простой;
bool Graph::is_directed()
{
	// идём по строкам
	for (int i = 0; i < m_size; i++)
	{
		// идём по столбцам
		for (int j = 0; j < m_size; j++)
		{
			// если граф неориентированный, то матрица симметрична, так как по ребру можно пройти подвум направлениям
			if (m_matrix[i][j] != m_matrix[j][i])
			{
				return true; // Найдено направленное ребро - граф ориентированный
			}// if (m_matrix[i][j] != m_matrix[j][i])

		}// for j

	}// for i

	return false; // Не найдено направленных ребер - граф неориентированный
}


// функция, возвращающая матрицу смежности
vector<vector<int>> Graph::adjacency_matrix()
{
	return(m_matrix);
}


// весовая функция, принимает номера вершин, возвращает вес ребра, связывающего их;
int Graph::Weight(int Vi, int Vj)

{
	// номера вершин вышли за диапазоны допустимых значений
	if ((Vi >= m_size || Vi < 0) || (Vj >= m_size || Vj < 0))
	{
		cout << "Ошибка! Такой вершины не существует\n";
		// вернули ошибку
		return(-1);
	}// if

	// если путь существует(в матрице смежности не 0)
	if (m_matrix[Vi][Vj] != 0)
	{
		cout << "Вес ребра между вершинами " << Vi << " и " << Vj << " равен" << m_matrix[Vi][Vj] << endl;
		cout << m_matrix[Vi][Vj] << endl;
		// возвращаем вес ребра между вершинами
		return(m_matrix[Vi][Vj]);
	}// if

	// граф ориентированный. Выводим вес дуги
	else if ((m_matrix[Vi][Vj] != m_matrix[Vj][Vi]) && (m_matrix[Vi][Vj] != 0 || m_matrix[Vj][Vi] != 0))
	{
		cout << "Граф ориентированный. Дуга есть. Направление учитывается. Вес дуги между вершинами " << Vi << " и " << Vj << " равен" << m_matrix[Vi][Vj] << endl;
		// возвращаем вес дуги
		return(m_matrix[Vi][Vj]);
	}// else if

	// ребра между вершинами нет - элемент матрицы смежности равен 0
	else if (m_matrix[Vi][Vj] == 0)
	{
		cout << "Ребра между вершинами " << Vi << " и " << Vj << "нет\n";
		// Вернули нулевое значение
		return(m_matrix[Vi][Vj]);
	}// else if

	return(0);
}


// функция, принимающая номера вершин и возвращает True, если в графе есть соответствующее ребро / дуга, False, если ребра нет;
bool Graph::is_edge(int Vi, int Vj)
{
	// номера вершин вышли за диапазоны допустимых значений - дуги нет
	if ((Vi >= m_size || Vi < 0) || (Vj >= m_size || Vj < 0))
	{
		// вернули, что дуги нет
		return(false);
	}// if

	// элемент матрицы смежности не равен 0 - ребро есть
	if (m_matrix[Vi][Vj] != 0)
	{
		// подтверждаем, что ребро есть
		return(true);
	}// if

	// элемент матрицы смежности нулевой - ребра нет
	if (m_matrix[Vi][Vj] == 0)
	{
		// подтверждаем, что ребра нет
		return(false);
	}// if

}


// функция, возвращающая список вершин, смежных вершине v;
vector<int> Graph::adjacency_list(int v)
{
	// список вершин
	vector<int> adjList;

	// Проходим по всем вершинам и проверяем, есть ли ребро между вершиной v и текущей вершиной
	for (int i = 0; i < m_size; i++)
	{
		// путь есть - элемент матрицы не нулевой
		if (m_matrix[v][i] != 0)
		{
			// помещаем вершину в список
			adjList.push_back(i);
		}// if (m_matrix[v][i] != 0)

	}// for i

	// Возвращаем список смежных вершин
	return adjList;
}


// функция, возвращающая список всех рёбер графа;
vector<pair<int, int>> Graph::list_of_edges_pairs()
{
	// вектор пар, содержащий ребро в виде двух инцидентных ему вершин
	vector<pair<int, int>> edges_pairs;
	// идём по всем элементам строки
	for (int i = 0; i < m_size; i++)
	{
		// идём по всем элементам столбца
		for (int j = 0; j < m_size; j++)
		{
			// если элемент не нулевой
			if (m_matrix[i][j] != 0)
			{
				// загрузили пару вершин
				edges_pairs.push_back(make_pair(i, j));
			}// if (m_matrix[i][j] != 0)
		}// for j
	}// for i

	// вернули вектор рёбер (пар вершин)
	return(edges_pairs);
}


// функция, возвращающая список всех рёбер графа, инцидентных вершине v / исходящих из вершины v
vector<pair<int, int>> Graph::list_of_edges(int v)
{
	int count = 0;
	vector<pair<int, int>> edges;         // вектор пар вершин(вектор рёбер)
	vector<pair<int, int>> edges_inc;     // вектор рёбер инцидентных вершине v / исходящих из вершины v
	edges = list_of_edges_pairs();        // получаем все пары вершин графа

	// обходим эти пары. Если граф неориентированный, то там будет пара (v,n) и (n, v) - достаточно рассмотреть для инцидентности первый элемент. В орграфе - исходящий элемент всегда первый
	for (int i = 0; i < edges.size(); i++)
	{
		// рассматриваем первый элемент пары
		if (edges[i].first == v)
		{
			// помещаем в списо ребер, инцидентных вершине данное ребро
			edges_inc.push_back(edges[i]);
			// увеличиваем счётчик
			count = count + 1;
		}//if (edges[i].first == v)
	}//for i

	// возвращаем  список всех рёбер графа, инцидентных вершине v / исходящих из вершины v
	return(edges_inc);
}




/*------------------------------------------------------------------------*/
/*                Функции               */
/*--------------------------------------*/

// сохранение графа как фотографии
string drawGraph(const vector<vector<int>>& adjacencyMatrix)
{
	// Проверяем размер матрицы смежности. Если больше 19, то считаем ее слишком большой
	if (adjacencyMatrix.size() <= 26)
	{
		bool key = false;
		// Проверяем наличие весов на ребрах, чтобы понять, нужно ли указывать их при выводе
		for (int i = 0; i < adjacencyMatrix.size(); i++)
		{
			for (int j = 0; j < adjacencyMatrix.size(); j++)
			{
				// Если вес ребра больше 1 или отрицательный, значит, нужно указывать вес в выводе
				if (adjacencyMatrix[i][j] > 1 || adjacencyMatrix[i][j] < 0)
					key = true;
			}
		}

		// Открываем файл для записи графа в формате DOT
		std::ofstream file;
		file.open("graph.dot");
		file << "digraph G {" << endl;

		if (key)
		{
			// Выводим граф с указанием весов ребер
			for (int i = 0; i < adjacencyMatrix.size(); i++)
			{
				for (int j = 0; j < adjacencyMatrix[i].size(); j++)
				{
					// Проверяем, что вес ребра не равен 0, чтобы не выводить ненужные ребра
					if (adjacencyMatrix[i][j] != 0)
					{
						// Выводим ребро с указанием веса в формате DOT
						file << i << " -> " << j << " [label=\"" << adjacencyMatrix[i][j] << "\"];" << endl;
					}// if (adjacencyMatrix[i][j] != 0) 
				}// for j
			}// for i
		}

		else
		{
			// Выводим граф без указания весов ребер
			for (int i = 0; i < adjacencyMatrix.size(); i++)
			{
				for (int j = 0; j < adjacencyMatrix[i].size(); j++)
				{
					// Проверяем, что вес ребра равен 1, чтобы не выводить ненужные ребра
					if (adjacencyMatrix[i][j] == 1)
					{
						// Выводим ребро без указания веса в формате DOT
						file << i << " -> " << j << ";" << endl;
					}//if (adjacencyMatrix[i][j] == 1) 
				}// for j
			}// for i
		}// if key

		// Закрываем файл и сохраняем результаты
		file << "}" << std::endl;
		file.close();

		// Генерируем изображение графа в формате PNG с помощью утилиты DOT
		system("dot -Tpng graph.dot -o graph.png");
		cout << "\n\nGraph image saved as graph.png" << endl;
	}

	// Выводим, что граф большой для рисования
	else
	{
		cout << "\n\nGraph image is not saved as graph.png. It is too big" << endl;
	}// if

	// возвращаем картинку для открытия силами OpenCV
	return "graph.png";
}


// вывод графа на экран
void OpenImage(const std::vector<std::vector<int>>& adjacencyMatrix)
{
	// Проверяем размерность матрицы смежности
	if (adjacencyMatrix.size() <= 26)
	{
		// Получаем путь к изображению, созданному с помощью функции drawGraph
		std::string imagePath = drawGraph(adjacencyMatrix);
		// Загружаем изображение с помощью OpenCV
		cv::Mat img = cv::imread(imagePath, -1);

		// Проверяем, удалось ли загрузить изображение
		if (img.empty())
		{
			cout << "Could not open or find the image" << endl;
			return;
		}// if

		// Создаем окно с названием "Graph"
		cv::namedWindow("Graph", cv::WINDOW_NORMAL);
		// Показываем изображение в окне
		cv::imshow("Graph", img);
		// Ждем, пока пользователь нажмет любую клавишу
		cv::waitKey(0);
		// Закрываем окно
		cv::destroyWindow("Graph");
		return;
	}// if (adjacencyMatrix.size() <= 19)
}


// вывод матрицы смежности на экран
void PrintMatrix(vector<vector<int>> matrix)
{
	// отключаем русский язык
	setlocale(0, "C");            // выводим массив в красивых скобках
	cout << setw(2) << setfill(' ') << (char)218 << (char)196 << (char)196 << setw(matrix.size() * 2 + 7) << setfill(' ') << (char)196 << (char)196 << (char)191 << endl;          // вывод верхних квадратных скобок

	// идём по строкам
	for (int i = 0; i < matrix.size(); i++)
	{
		cout << setw(5) << setfill(' ');
		// идём по столбцам
		for (int j = 0; j < matrix.size(); j++)
		{
			// выводим элемент матрицы
			cout << matrix[i][j] << " ";
		}// for j

		cout << endl;
	}// for i
	cout << setw(2) << setfill(' ') << (char)192 << (char)196 << (char)196 << setw(matrix.size() * 2 + 7) << setfill(' ') << (char)196 << (char)196 << (char)217 << endl;          // вывод верхних квадрат
	// подключаем русский язык
	setlocale(LC_ALL, "Russian");

	// возвращаем обещанное значение
	return;
}


// печать справки и авторов работы
void Usloviya()
{
	cout << "\n\t\t\t\t/********************************************************************************\n";
	cout << "\t\t\t\t* Л А Б О Р А Т О Р Н А Я   Р А Б О Т А  №4  З А   5   С Е М Е С Т Р   С  +  +  *\n";
	cout << "\t\t\t\t*-------------------------------------------------------------------------------*\n";
	cout << "\t\t\t\t* Project Type  : Win64 Console Application                                     *\n";
	cout << "\t\t\t\t* Project Name  : Teor_Grph_Lab3                                                *\n";
	cout << "\t\t\t\t* File Name     : Lab3. CPP                                                     *\n";
	cout << "\t\t\t\t* Programmer(s) : Викулов Д.Г.                                                  *\n";
	cout << "\t\t\t\t* Modifyed By   :                                                               *\n";
	cout << "\t\t\t\t* Created       : 15/09/23                                                      *\n";
	cout << "\t\t\t\t* Last Revision : 13/10/23                                                      *\n";
	cout << "\t\t\t\t********************************************************************************/\n";

	cout << "\n\t\t\t\t\t\t\t\x1b[31m   С П Р А В К А : \n\n\x1b[30m";
	// Выводим условия в таблице
	setlocale(0, "C");                       // отключаем русский язык
	cout << char(218) << setw(40) << setfill((char)196) << (char)191 << endl << (char)179;  // выводим верхнюю строку шапки
	setlocale(LC_ALL, "Rus");                // подключаем русский язык
	cout << " Выберите одно значние из списка:      ";
	setlocale(0, "C");                       // отключаем русский язык
	cout << (char)179 << endl << (char)195 << setw(5) << setfill((char)196) << (char)194 << setw(35) << setfill((char)196) << (char)180 << setfill(' ') << endl << (char)179;    // выводим нижнюю строку шапки с разделителем между номером и названием алгоритма
	cout << "  e " << (char)179 << "  Edges_list_file_path            ";                                                                                                         // выводим условия выбора и нижнюю с боковыми строчками таблицы
	cout << (char)179 << endl << (char)195 << setw(5) << setfill((char)196) << (char)197 << setw(35) << setfill((char)196) << (char)180 << endl << (char)179;
	cout << "  m " << (char)179 << "  Adjacency_matrix_file_path      ";
	cout << (char)179 << endl << (char)195 << setw(5) << setfill((char)196) << (char)197 << setw(35) << setfill((char)196) << (char)180 << endl << (char)179;
	cout << "  l " << (char)179 << "  Adjacency_list_file_path        ";
	cout << (char)179 << endl << (char)195 << setw(5) << setfill((char)196) << (char)197 << setw(35) << setfill((char)196) << (char)180 << endl << (char)179;
	cout << "  o " << (char)179 << "  Output_file_path                ";
	cout << (char)179 << endl << (char)192 << setw(5) << setfill((char)196) << (char)193 << setw(35) << setfill((char)196) << (char)217 << endl;
	cout << endl;
	setlocale(LC_ALL, "Rus");               // подключаем русский язык

	return;                                 // возвращаем обещанное значение
}


// обход вглубину
void DFS(vector<vector<int>> matrix,                              // матрица смежности, с которой будем работать
	     int StartVertex,                                         // стартовая вершина обхода
	     vector<bool>& Visited,                                   // вектор посещённых вершин для обхода
	     vector<int>& obx)                                        // вектор, содержащий все вершины в порядке работы алгоритма
{                                 
	Visited[StartVertex] = true;                                  // отмечаем вершину как посещённую
	obx.push_back(StartVertex);                                   // заносим вершину в вектор посещённых
	
	// проходимся по всем столбцам строки StartVertex
	for (int i = 0; i < matrix.size(); i++)
	{
		// если есть путь в другую непосещённую вершину
		if (matrix[StartVertex][i] != 0 && Visited[i] == false)
		{
			// рекурсивно вызываем обход для дочерней вершины
			DFS(matrix, i, Visited, obx);
			// заносим вершины на обратном пути по ребру в порядке рекурсии
			obx.push_back(StartVertex);
		}// if (matrix[StartVertex][i] != 0 && Visited[i] == false)

	}// for i

	// возвращаем обещанное значение
	return;
}


// превращение графа в соотнесённый
void convertToUndirected(vector<vector<int>>& matrix)             // матрица смежности для изменения
{
	int size = matrix.size();                                     // размер матрицы смежности - количество вершин в графе

	// Проходим по каждому элементу матрицы и делаем ее симметричной(обход по диагонали)
	for (int i = 0; i < size; i++)
	{
		// идём по диагонали
		for (int j = i + 1; j < size; j++)
		{
			if (matrix[i][j] != 0)
			{
				// Если есть ребро из i в j, создаем ребро из j в i
				matrix[j][i] = matrix[i][j];
			}// if

			else if (matrix[j][i] != 0)
			{
				// Если есть ребро из j в i, создаем ребро из i в j
				matrix[i][j] = matrix[j][i];
			}// else if

		}// for j

	}// for i
}


// поиск мостов и точек сочленения
void Most(vector<vector<int>> m_matrix,                           // матрица смежности, с которой будем работать
	      int Start_Vertex,                                       // начальная вершина обхода для очередной компоненты связности
	      vector <bool>& visited,                                 // массив посещённых вершин
	      set <int> &Articulation_point,                          // массив точек сочленения
	      vector <pair<int, int>>& bridge)                        // массив мостов
{
	vector<bool>Visited(m_matrix.size(), false);                  // создаём массив посещённых вершин для очередной компоненты связности
	vector<int> vec_1;                                            // вектор, в котором хранятся вершины обхода DFS
	vec_1.clear();                                                // чистим этот вектор

	// запускаем DFS - определяем состав и порядок обхода очередной компоненты связности
	DFS(m_matrix, Start_Vertex, Visited, vec_1);


	// в основном векторе посещения - отмечаем те вершины, которые уже посещены, чтобы при обращении к другой компоненте связности посещенные ранее вершины сохранились
	for (int i = 0; i < Visited.size(); i++)
	{
		// если в векторе посещения для данной компоненты вершина - посещена
		if (Visited[i] == true)
		{
			// отмечаем посещение этой вершины в основном векторе для всего графа
			visited[i] = Visited[i];
		}// if

	}// for i

	vector<int> predok(m_matrix.size(), -1);                      // вектор, в котором хранятся предки вершин данной компоненты

	// заполнение предков
	for (int i = 0; i < vec_1.size(); i++)
	{
		// у начальной вершины компоненты связности - предка нет. Для всех остальных вершин ставим предка в соответствии с порядком обхода графа
		if (predok[vec_1[i]] == -1 && vec_1[i] != Start_Vertex)
		{
			// ставим предка в соответствии с порядком обхода графа. У предка индекс в массиве обхода на 1 меньше
			predok[vec_1[i]] = vec_1[i - 1];
		}// if

	}// for i


	// определяем количество вершин в графе - размер матрицы смежности
	int Verticles = m_matrix.size();
	// вспомогательный счётчик для нумерации tin - нумерация начинается с 1, а не с 0
	int Counter = 1;
	// вектор tin каждой вершины - изначально в нём - бесконечности
	vector<int> Tin(Verticles, INF);
	// вспомогательный вектор для сохранения вершин, в которых мы уже были. Tin для них помечен
	vector<int> stack;


	// ПОМЕЧАЕМ tin ДЛЯ КАЖДОЙ ВЕРШИНЫ КОМПОНЕНТЫ СВЯЗНОСТИ
	for (int i = 0; i < vec_1.size(); i++)
	{
		// флаг того, что мы уже были в этой вершине
		bool flag = true;
		// проходимся по всему стэку - смотрим была ли вершина i пройдена ранее
		for (int j = 0; j < stack.size(); j++)
		{
			// если вершина i ещё не посещалась - устанавливаем флаг того, что надо е пометить
			if (stack[j] != vec_1[i])
			{
				flag = true;
			}

			// иначе - вершина посещена - переходим к другой 
			else
			{
				flag = false;
				break;
			}// if
		}// for j

		// если вершину нужно пометить - помечаем её
		if (flag)
		{
			// после того как пометили - добавляем в стек
			stack.push_back(vec_1[i]);
			//устанавливаем Tin значение счётчика
			Tin[vec_1[i]] = Counter;
			// увеличиваем счётчик - спускаемся вниз
			Counter = Counter +1;
		}
		// иначе - вершина посещена ранее. Спуск вниз невозможен. Поднимаемся вверх по компоненте связности, и уменьшаем счётчик
		else
		{
			Counter = Counter - 1;
		}// if
	}// for i



	// ПОИСК ОБРАТНЫХ РЁБЕР КОМПОНЕНТЫ СВЯЗНОСТИ
	vector<bool> visit(Verticles, false);         // вектор обработанных вершин при поиске обратных рёбер
	vector < pair<int, int>> obratnoe;            // вектор обратных рёбер компоненты связности

	// поиск обратных рёбер
	// смотрим все посещенные вершины в порядке обхода
	for (int i = 0; i < vec_1.size(); i++)
	{
		// идём по всем элементам, смежным в матрице с i
		for (int j = 0; j < Verticles; j++)
		{
			// если ребро между вершинами существует, и данная вершина j не является прямым предком i, и вершина i находится ниже вершины j в графе, причем мы ранее данную вершину не посещали
			if (m_matrix[vec_1[i]][j] != 0 && predok[vec_1[i]] != j && Tin[vec_1[i]] > Tin[j] && visit[vec_1[i]] == false)
			{
				// добавляем в вектор обратное ребро с началом в vec_1[i] и концом в j
				obratnoe.push_back({ vec_1[i], j });
			}// if

		}// for j

		// помечаем, что для данной вершины рассмотрены все обратные рёбра - переходим к следующей
		visit[vec_1[i]] = true;
	}// for i



	// РЕАЛИЗАЦИЯ tback
	// НА ДАННОМ ЭТАПЕ - МИНИМУМ МЕЖДУ tin И ОБРАТНЫМИ РЁБРАМИ
	// вектор Tback - изначально там бесконечности
	vector <int> Tback(m_matrix.size(), INF);
	// для начальной вершины компоненты tback равно 1 = tin: так как не может быть меньше
	Tback[Start_Vertex] = 1;
	// вспомогательный флаг наличия обратного ребра у вершины
	bool flag = false;
	// вспомогательная переменная для хранения номера вершины с обратным ребром
	int value_1;
	//  пременная, которая показывает есть ли обратное ребро или нет
	bool flag_1 = false;

	for (int i = 0; i < vec_1.size(); i++)                //  проход по вектору, в котором хранятся вершины обхода DFS
	{
		for (int j = 0; j < obratnoe.size(); j++)         // проход по парам обратных рёбер. Смотрим, у скольких из них вершина i является началом
		{
			// если текущая вершина в векторе обхода совпадает начальной вершиной в векторе обратных рёбер, и она еще не была рассмотрена
			if (vec_1[i] == obratnoe[j].first && flag == false)
			{
				// помечаем, что можно рассматривать эту вершину на наличие обратного ребра. Иначе - пропускаем вершину. У неё нет этого обратного ребра. Переходим к рассмотрению следующего возможного обратного ребра для данной вершины
				flag = true;
				// запоминаем конец этого ребра
				value_1 = obratnoe[j].second;
			}// if

			// если вершина рассматривается, и вторая вершина в векторе пар рёбер находится выше текущей рассматриваемой -> ребро обратное
			if (flag && Tin[value_1] < Tback[vec_1[i]])
			{
				// устанавливаем промежуточный tback как минимум из tin собственного и tin конца обратного ребра
				Tback[vec_1[i]] = min(Tin[vec_1[i]], Tin[value_1]);
				// помечаем, что tback уже изменён
				flag_1 = true;

			}// if

			// если нет обратного ребра
			else if (!flag_1)
			{
				// промежуточный tback будет совпадать с tin данной вершины
				Tback[vec_1[i]] = Tin[vec_1[i]];
			}// else if

			// переходим к следующему обратному ребру
			flag = false;
		}// for j

		// переходим к следующей вершине, которая может стать началом обратного ребра
		flag = false;
	}



	// РАБОТА С СЫНОВЬЯМИ КАЖДОЙ ВЕРШИНЫ КОМПОНЕНТЫ СВЯЗНОСТИ
	int min;
	// будет использоваться для хранения позиции вершины, которая будет повторяться в векторе обхода DFS. Эта позиция указывает на начало диапазона вершин, которые являются потомками данной вершины.
	int position;
	// проход по сыновьям 
	for (int i = 0; i < vec_1.size(); i++)
	{
		position = -1; // позиция вершины
		// проходимся по вектору обхода DFS - рассматриваем все вершины, большие i - ищем первое совпадение
		for (int j = i; j < vec_1.size(); j++)
		{
			// потомками являются те вершины, которые расположены между двумя одинаковыми вершинами  сразными индексами в векторе обхода DFS
			if (vec_1[j] == vec_1[i] && j != i)
			{
				// запоминаем совпадение - предка
				position = j;
			}// if

			// Проходятся все вершины между i и position и находится минимальное значение Tback среди этих вершин без учета потомков. Это значение записывается в переменную "min".
			// если пара найдена -> вершина предок
			if (position != -1)
			{
				// запоминаем min значение tback текущей вершины
				min = Tback[vec_1[i]];

				// проходимся по всем вершинам между повторениями - ищем минимум среди потомков
				for (int k = i + 1; k < position; k++)
				{
					// выбираем самый маленький tin среди потомков данной вершины
					if (min > Tback[vec_1[k]])
					{
						min = Tback[vec_1[k]];
					}// if

				}// for k

				// устанавливаем его как tback родителя
				Tback[vec_1[i]] = min;
				// переходим к следующей вершине - будем также искать пару
				position = -1;
			}// if

		}// for j

	}// for i

	// счётчик обращений для корневой вершины
	int counter = 0;

	// проверка корня на точку сочленения. Корень не может быть точкой сочленения
	// Для корневой вершины: она будет являться точкой сочленения, если в неё происходит возврат более, чем один раз
	for (int i = 0; i < vec_1.size(); i++)
	{
		// проверка корня на точку сочленения
		if (vec_1[i] == Start_Vertex)
		{
			// увеличиваем счётчик
			counter = counter + 1;
		}// if

	}// for i


	// ПОИСК ТОЧЕК СОЧЛЕНЕНИЯ
	// этих точек не может быть больше, чем количество вершин в графе
	for (int i = 0; i < m_matrix.size(); i++)
	{
		// если у вершины есть предок, и tin предка <= tback потомка, и предок - не является корневой вершиной
		if (predok[i] != -1 && Tback[i] >= Tin[predok[i]] && predok[i] != vec_1[0])
		{
			Articulation_point.insert(predok[i] + 1);  // добавление вершины во множество
		}// if

		// если у вершины есть предок, и tin предка <= tback потомка, и предок -  является корневой вершиной, тогда делаем возврат не более, чем один раз
		else if (predok[i] != -1 && Tback[i] >= Tin[predok[i]] && predok[i] == vec_1[0] && counter > 2)
		{
			Articulation_point.insert(predok[i] + 1);
		}// else if

	}// for i


	
	// ПОИСК МОСТОВ 
	for (int i = 0; i < m_matrix.size(); i++)
	{
		// если у вершины есть предок и  tin предка < tback потомка - то i, predok[i] - мост
		if (predok[i] != -1 && Tback[i] > Tin[predok[i]])
		{
			bridge.push_back(make_pair(predok[i] + 1, i + 1));
		}// if

	}// for i
}


// вывод матрицы  в файл
void PrintMatrToFile(vector<vector<int>> matrix)                 // матрица, которую необходимо вывести в файл. Передача по значению
{
	// идём по строкам матрицы
	for (int i = 0; i < matrix.size(); i++)
	{
		// идём по столбцам матрицы
		for (int j = 0; j < matrix.size(); j++)
		{
			// выводим очередной элемент матрицы в файл
			fout << matrix[i][j] << " ";
		}// for j
		fout << endl;
	}// for i

	// возвращаем обещанное значение
	return;
}

/*------------------------------------------------------------------------*/
/*            Главная функция           */
/*--------------------------------------*/
int main()
{
	// подключаем русский язык
	setlocale(LC_ALL, "Russian");
	// цвет консоли - белый
	system("color F0");
	// флаг печати в файл. Изначально - печати нет
	bool print = false;
	// ключ, введённый пользователем для печати
	char letter;

	cout << "\t\t\t\t\t\t\x1b[34m    Р А Б О Т А   С   Г Р А Ф А М И\x1b[30m\n\n\n";
	// создали объект графа. Конструктор применился по-умолчанию
	Graph NewGraph;

	// Выбор, хочет ли пользователь выводить в файл вычесленную информацию
	cout << " Хотите ли Вы выводить данные в файл? Введите <o>, если хотите, или любой другой символ - если нет. Введите: ";
	cin >> letter;                        // ввод пользователем
	cout << "\n Вы ввели: " << letter;    // эхо-печать
	
	// Если пользователь хочет печатать. Устанавливаем флаг
	if (letter == 'o' || letter == 'O')
	{
		print = true;
	}// if (letter == 'o' || letter == 'O')
	
	// Выводим на экран матрицу смежности
	cout << "\n\n\t\t\t\t\t\x1b[35m М А Т Р И Ц А   С М Е Ж Н О С Т И   П О   И С Х О Д Н Ы М   Д А Н Н Ы М :\x1b[30m\n\n";
	PrintMatrix(NewGraph.adjacency_matrix());

	// делаем матрицу неориентированной
	// для обычного графа после процедуры - матрица не изменится
	// для орграфа - рассматриваем соотнесённый граф
	vector<vector<int>> graph = NewGraph.adjacency_matrix();
	convertToUndirected(graph);

	// если граф ориентированный - выводим матрицу соотнесённого графа
	if (NewGraph.is_directed())
	{
		cout << "\n\n\t\t\t\t\t\x1b[32m М А Т Р И Ц А   С М Е Ж Н О С Т И   С О О Т Н Е С Ё Н Н О Г О   Г Р А Ф А :\x1b[30m\n\n";
		PrintMatrix(graph);
	}

	vector<bool>visited(NewGraph.adjacency_matrix().size(), false);   // вектор посещённых вершин для графа в целом
	set<int>Articulation_point;                                       // множество точек сочленения
	vector<pair<int, int>> bridge;                                    // вектор пар мостов

	// проходимся по всем вершинам графа
	for (int i = 0; i < NewGraph.adjacency_matrix().size(); i++)      // проход по всем компонентам связности
	{
		// если имеется несколько компонент связности, то за один вызов поиска мостов просмотрятся не все вершины -> повторяем вызов пока есть непосещенные вершины
		if (visited[i] == false)
		{
			Most(graph, i, visited, Articulation_point, bridge);
		}// if

	}// for i


	// Выводим точки сочленения на экран - идём по всем элементам множества
	cout << "\n\x1b[34m Т О Ч К И   С О Ч Л Е Н Е Н И Я :\x1b[30m\n";
	cout << " Cut vertices:  \n";
	cout << " [";
	for (int n : Articulation_point)
	{
		cout << n << " ";
	}// for n
	cout << "] \n";

	// выводим мосты на экран
	cout << "\n\x1b[36m М О С Т Ы :\x1b[30m\n";
	cout << " Bridges:  \n";
	cout << " [";
	for (int i = 0; i < bridge.size(); i++)
	{
		// выводим так, чтобы на первом месте стояла наименьшая вершина
		if (bridge[i].first <= bridge[i].second)
		{
			cout << "(" << bridge[i].first << ", " << bridge[i].second << ")";
		}// if

		else if (bridge[i].first > bridge[i].second)
		{
			cout << "(" << bridge[i].second << ", " << bridge[i].first << ")";
		}// else if

		// выводим запятые - разделители между каждым мостом
		if (i != bridge.size() - 1)
		{
			cout << ", ";
		}// if

	}// for i
	cout << " ]\n";

	// ВЫВОД В ФАЙЛ, если захотел пользователь
	if (print)
	{
		fout.open(FNAMEOUT);           // связываем объект с файлом
		if (!fout.is_open())           // файл не найден
		{
			cout << "Файла с таким именем нет. Невозможно осуществить чтение";
			fin.close();               // закрыть файл для чтения
			system("pause");
			exit(0);                   // возвращаем значение, соответствующее типу в caller
		}// if (!fout.is_open())

		fout << "\t\t\t\t\t\t    Р А Б О Т А   С   Г Р А Ф А М И";
		fout << "\n\n М А Т Р И Ц А   С М Е Ж Н О С Т И   П О   И С Х О Д Н Ы М   Д А Н Н Ы М :\n\n";
		// выводим матрицу смежности в файл
		PrintMatrToFile(NewGraph.adjacency_matrix());

		// если граф ориентированный - выводим матрицу соотнесённого графа
		if (NewGraph.is_directed())
		{
			cout << "\n\n\t\t\t\t\t\x1b[32m М А Т Р И Ц А   С М Е Ж Н О С Т И   С О О Т Н Е С Ё Н Н О Г О   Г Р А Ф А :\x1b[30m\n\n";
			PrintMatrix(graph);
		}

		// Выводим точки сочленения на экран - идём по всем элементам множества
		fout << "\n Т О Ч К И   С О Ч Л Е Н Е Н И Я :\n";
		fout << " Cut vertices:  \n";
		fout << " [";
		for (int n : Articulation_point)
		{
			fout << n << " ";
		}// for n
		fout << "] \n";

		// выводим мосты на экран
		fout << "\n М О С Т Ы :\n";
		fout << " Bridges:  \n";
		fout << " [";
		for (int i = 0; i < bridge.size(); i++)
		{
			// выводим так, чтобы на первом месте стояла наименьшая вершина
			if (bridge[i].first <= bridge[i].second)
			{
				fout << "(" << bridge[i].first << ", " << bridge[i].second << ")";
			}// if

			else if (bridge[i].first > bridge[i].second)
			{
				fout << "(" << bridge[i].second << ", " << bridge[i].first << ")";
			}// else if

			// выводим запятые - разделители между каждым мостом
			if (i != bridge.size() - 1)
			{
				fout << ", ";
			}// if

		}// for i
		fout << " ]\n";

	}// if (print)

	// выводим картинку с графом на экран
	OpenImage(NewGraph.adjacency_matrix());

	// возвращаем обещанное значение
	return 0;
}